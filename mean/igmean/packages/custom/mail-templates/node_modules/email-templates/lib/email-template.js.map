{"version":3,"sources":["../src/email-template.js"],"names":[],"mappings":"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","file":"email-template.js","sourcesContent":["import P from 'bluebird'\nimport Debug from 'debug'\nimport {basename} from 'path'\nimport juice from 'juice'\nimport {isFunction} from 'lodash'\nimport {ensureDirectory, readContents, renderFile} from './util'\n\nconst debug = Debug('email-templates:email-template')\n\nexport default class EmailTemplate {\n  constructor (path, options = {}) {\n    this.files = {}\n    this.path = path\n    this.dirname = basename(path)\n    this.options = options\n    debug('Creating Email template for path %s', basename(path))\n  }\n\n  _init () {\n    if (this.isInited) return P.resolve()\n\n    debug('Initializing templates')\n    return ensureDirectory(this.path)\n    .then(() => this._loadTemplates())\n    .then(() => {\n      this.isInited = true\n      debug('Finished initializing templates')\n    })\n  }\n\n  _loadTemplates () {\n    return P.map(['html', 'text', 'style'], (type) => {\n      return readContents(this.path, type)\n    })\n    .then((files) => {\n      let [html, text, style] = files\n\n      if (!html && !text) {\n        let err = new Error(`Neither html nor text template files found or are both empty in path ${this.dirname}`)\n        err.code = 'ENOENT'\n        throw err\n      }\n\n      if (html) {\n        debug('Found HTML file %s in %s', basename(html.filename), this.dirname)\n      }\n      this.files.html = html\n\n      if (text) {\n        debug('Found text %s file in %s', basename(text.filename), this.dirname)\n      }\n      this.files.text = text\n\n      if (style) {\n        debug('Found stylesheet %s in %s', basename(style.filename), this.dirname)\n      }\n      this.files.style = style\n\n      debug('Finished loading template')\n    })\n  }\n\n  renderText (locals, callback) {\n    debug('Rendering text')\n    return this._init()\n    .then(() => {\n      if (!this.files.text) return null\n      return renderFile(this.files.text, locals)\n    })\n    .tap(() => debug('Finished rendering text'))\n    .nodeify(callback)\n  }\n\n  renderHtml (locals, callback) {\n    debug('Rendering HTML')\n    return this._init()\n    .then(() => {\n      return P.all([\n        renderFile(this.files.html, locals),\n        this._renderStyle(locals)\n      ])\n    })\n    .then((results) => {\n      let [html, style] = results\n      if (!style) return html\n      if (this.options.juiceOptions) {\n        debug('Using juice options ', this.options.juiceOptions)\n      }\n      return juice.inlineContent(html, style, this.options.juiceOptions || {})\n    })\n    .tap(() => debug('Finished rendering HTML'))\n    .nodeify(callback)\n  }\n\n  render (locals, callback) {\n    if (isFunction(locals)) {\n      callback = locals\n      locals = {}\n    }\n    debug('Rendering template with locals %j', locals)\n\n    return P.all([\n      this.renderHtml(locals),\n      this.renderText(locals)\n    ])\n    .then((rendered) => {\n      let [html, text] = rendered\n      return {\n        html, text\n      }\n    })\n    .nodeify(callback)\n  }\n\n  _renderStyle (locals) {\n    return new P((resolve) => {\n      // cached\n      if (this.style !== undefined) return resolve(this.style)\n\n      // no style\n      if (!this.files.style) return resolve(null)\n\n      debug('Rendering stylesheet')\n      renderFile(this.files.style, locals)\n      .then((style) => {\n        this.style = style\n        debug('Finished rendering stylesheet')\n        resolve(style)\n      })\n    })\n  }\n}\n"]}