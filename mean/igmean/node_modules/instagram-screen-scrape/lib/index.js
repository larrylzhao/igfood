// Generated by CoffeeScript 1.9.3
(function() {
  var InstagramPosts, Readable, getPosts, jsonRequest,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Readable = require('readable-stream').Readable;

  jsonRequest = require('./util').jsonRequest;


  /**
   * Make a request for a Instagram page, parse the response, and get all the
     posts.
   * @param {String} username
   * @param {String} [startingId] The maximum post id query for (the lowest one
     from the last request), or undefined if this is the first request.
   * @return {Stream} A stream of posts
   */

  getPosts = function(username, startingId) {
    console.log(startingId);
    return jsonRequest('items.*', {
      uri: "https://instagram.com/" + username + "/media/",
      //uri: "https://instagram.com/explore/tags/" + username,
      qs: {
        'max_id': startingId
      }
    });
  };


  /**
   * Stream that scrapes as many posts as possible for a given user.
   * @param {String} options.username
   * @return {Stream} A stream of post objects.
   */

  InstagramPosts = (function(superClass) {
    extend(InstagramPosts, superClass);

    InstagramPosts.prototype._lock = false;

    InstagramPosts.prototype._minPostId = void 0;

    function InstagramPosts(arg) {
      this.username = arg.username;
      this.destroy = bind(this.destroy, this);
      this._read = bind(this._read, this);
      InstagramPosts.__super__.constructor.call(this, {
        highWaterMark: 16,
        objectMode: true
      });
      this._readableState.destroyed = false;
    }

    InstagramPosts.prototype._read = function() {
      var hasMorePosts, lastPost;
      if (this._lock) {
        return;
      }
      this._lock = true;
      if (this._readableState.destroyed) {
        this.push(null);
        return;
      }
      hasMorePosts = false;
      lastPost = void 0;
      return getPosts(this.username, this._minPostId).on('error', (function(_this) {
        return function(err) {
          return _this.emit('error', err);
        };
      })(this)).on('data', (function(_this) {
        return function(rawPost) {
          var post;
          hasMorePosts = true;
          post = {
            id: rawPost.code,
            username: _this.username,
            time: +rawPost['created_time'],
            type: rawPost.type,
            like: rawPost.likes.count,
            comment: rawPost.comments.count
          };
          if (rawPost.caption != null) {
            post.text = rawPost.caption.text;
          }
          if (rawPost.images != null) {
            post.image = rawPost.images['standard_resolution'].url;
          }
          if (rawPost.videos != null) {
            post.video = rawPost.videos['standard_resolution'].url;
          }
          _this._minPostId = rawPost.id;
          if (lastPost != null) {
            _this.push(lastPost);
          }
          return lastPost = post;
        };
      })(this)).on('end', (function(_this) {
        return function() {
          if (hasMorePosts) {
            _this._lock = false;
          }
          if (lastPost != null) {
            _this.push(lastPost);
          }
          if (!hasMorePosts) {
            return _this.push(null);
          }
        };
      })(this));
    };

    InstagramPosts.prototype.destroy = function() {
      if (this._readableState.destroyed) {
        return;
      }
      this._readableState.destroyed = true;
      return this._destroy((function(_this) {
        return function(err) {
          if (err) {
            _this.emit('error', err);
          }
          return _this.emit('close');
        };
      })(this));
    };

    InstagramPosts.prototype._destroy = function(cb) {
      return process.nextTick(cb);
    };

    return InstagramPosts;

  })(Readable);

  module.exports = InstagramPosts;

}).call(this);
